@use "sass:map";
@use "animations" as *;
@use "assets" as *;
@use "colors" as *;
@use "page" as *;
@use "media" as *;
@use "modifiers" as *;
@use "stack" as *;

$theme: get-theme("landing");

// TODO: Use min-max mixin and abstract all used values to global

:host {
	position: relative;

	@include stack("route");

	& .page {
		@include page;
	}

	& #splash {
		@include page-bg-content {
			background-image: url(#{map.get($asset-registry, "landing", "splash-background")});
			background-repeat: no-repeat;
			background-size: cover;
			filter: brightness(50%);

			@include if-supported("filter", brightness(50%), blur(0.2em)) {
				transform: scale(1.02);
			}
		}

		& > .content {
			@include flex-column-center;

			& > h1 {
				color: map.get($theme, "accent", "hex");
				// TODO: Verify fonts, sizes and weights and abstract to global
				font-family: "Share Tech Mono", monospace;
				font-size: clamp(3em, 10vw, 10em);
				font-weight: 500;
				transition: color 0.2s ease;

				@include reset-offsets;
				@include disallow-selection;
				@include chromatic-aberration(map.get($theme, "accent", "hex"));

				&:hover, &:focus-visible {
					color: map.get($theme, "accent", "invert", "hex");
					animation: chromatic-aberration 10s ease infinite;
				}
			}
		}
	}

	& #overview {
		@include page-bg-color(map.get($theme, "background", "hex"));
	}

	& #stats-view {
		@include page-bg-content {
			background-image: url(#{map.get($asset-registry, "landing", "stats-view-background")});
			background-repeat: repeat;
			background-size: auto;
		}
	}

	& #map-view {
		@include page-bg-color(map.get($theme, "background", "hex"));
	}
}
