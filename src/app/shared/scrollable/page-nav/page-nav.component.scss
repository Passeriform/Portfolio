@use "sass:map";
@use "sass:math";
@use "global";
@use "shapes";

@import "./page-nav.colors";

$nav-extent-em: 2em;
$nav-link-dot-size: 1em;
$collapsed-em: -(math.div($nav-extent-em + $nav-link-dot-size, 2));
$nav-flap-size: $nav-extent-em;
$nav-link-centering-padding: math.div($nav-extent-em - $nav-link-dot-size, 2);
$nav-link-inter-padding: $nav-link-dot-size;
$traveller-centering-offset: math.div($nav-extent-em - $nav-link-dot-size, 2);
$traveller-arrow-offset: $nav-link-dot-size;
$traveller-inter-offset: calc(#{$nav-flap-size + $nav-link-inter-padding} + (#{$nav-link-dot-size + (2 * $nav-link-inter-padding)} * var(--traveller-offset)));
$nav-flap-shapes: (
	top: shapes.get-shape(["trapezoid", "short-bottom"], $nav-flap-size),
	right: shapes.get-shape(["trapezoid", "short-left"], $nav-flap-size),
	bottom: shapes.get-shape(["trapezoid", "short-top"], $nav-flap-size),
	left: shapes.get-shape(["trapezoid", "short-right"], $nav-flap-size),
);
$traveller-arrow-shapes: (
	top: shapes.get-shape(["arrow", "point-down"]),
	right: shapes.get-shape(["arrow", "point-left"]),
	bottom: shapes.get-shape(["arrow", "point-up"]),
	left: shapes.get-shape(["arrow", "point-right"]),
);

// TODO: Use global variables for clip-path shapes

// TODO: Use selector-replace to add classes in grandparent selectors

// TODO: Use variables for repeated selector paths and attributes

// TODO: Refactor unused styles and simplify

// TODO: Use mixin to minimize and reduce naming confusion

// TODO: Check if other places can use replacement of flex with inline-flex

:host {
	position: absolute;
	display: flex;
	justify-content: center;
	pointer-events: none;
	transition: all 0.2s ease;

	@each $position, $shape in $nav-flap-shapes {
		&.#{$position} {
			@if (index([ "top", "bottom" ], $position)) {
				left: 0;
				flex-direction: row;
				width: 100%;
				height: $nav-extent-em;

			 	& > ul.page-nav-container {
					flex-direction: row;
					padding: 0 $nav-flap-size;

					& > li.page-nav-entry {
						flex-direction: column;

						& > a.page-nav-link {
							padding: $nav-link-centering-padding $nav-link-inter-padding;
						}
					}
				}
			} @else {
				top: 0;
				flex-direction: column;
				width: $nav-extent-em;
				height: 100%;

				& > ul.page-nav-container {
					flex-direction: column;
					padding: $nav-flap-size 0;

					& > li.page-nav-entry {
						flex-direction: row;

						& > a.page-nav-link {
							padding: $nav-link-inter-padding $nav-link-centering-padding;
						}
					}
				}
			}

			#{$position}: $collapsed-em;

			@media (hover: none), (pointer: coarse) {
				#{$position}: 0;
			}

			&.expanded {
				#{$position}: 0;
			}

			& > ul.page-nav-container {
				clip-path: $shape;
			}
		}
	}

	@each $position, $shape in $traveller-arrow-shapes {
		&.#{$position} {
			@if (index([ "top", "bottom" ], $position)) {
				& > ul.page-nav-container > .page-nav-traveller {
					left: $traveller-inter-offset;
					width: $nav-link-dot-size;
					height: math.div(math.sqrt(3), 2) * math.div($nav-link-dot-size, 2);
				}
			} @else {
				& > ul.page-nav-container > .page-nav-traveller {
					top: $traveller-inter-offset;
					width: math.div(math.sqrt(3), 2) * math.div($nav-link-dot-size, 2);
					height: $nav-link-dot-size;
				}
			}

			&.expanded > ul.page-nav-container > .page-nav-traveller {
				#{$position}: $traveller-centering-offset;
			}

			& > ul.page-nav-container > .page-nav-traveller {
				#{$position}: $traveller-centering-offset + $traveller-arrow-offset;
				clip-path: $shape;
			}

			@media (hover: none), (pointer: coarse) {
				& > ul.page-nav-container > .page-nav-traveller {
					#{$position}: $traveller-centering-offset;
					width: $nav-link-dot-size;
					height: $nav-link-dot-size;
					clip-path: shapes.get-shape(["ellipse", "circle"]);
				}
			}
		}
	}

	&.expanded > ul.page-nav-container > .page-nav-traveller {
		width: $nav-link-dot-size;
		height: $nav-link-dot-size;
		clip-path: shapes.get-shape(["ellipse", "circle"]);
	}

	& > ul.page-nav-container {
		position: relative;
		display: inline-flex;
		justify-content: center;
		margin: 0;
		background-color: invert(map.get($theme, "background", "hex"));
		color: invert(map.get($theme, "accent", "hex"));

		& > li.page-nav-entry {
			display: inline-flex;
			justify-content: center;

			& > a.page-nav-link {
				text-decoration: none;
				cursor: pointer;

				& > .page-nav-marker {
					width: $nav-link-dot-size;
					height: $nav-link-dot-size;
					border: 1px solid invert(map.get($theme, "background", "hex"));
					border-radius: $nav-link-dot-size;
					background-color: transparent;
					mix-blend-mode: difference;
				}
			}
		}

		& > .page-nav-traveller {
			position: absolute;
			transform: scale(1.25);
			background-color: invert(map.get($theme, "background", "hex"));
			mix-blend-mode: difference;
			pointer-events: none;
			transition: all 0.2s ease;
		}
	}

	& > * {
		pointer-events: all;
	}
}
