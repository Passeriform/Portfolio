@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "colors" as *;
@use "media" as *;
@use "shapes" as *;
@use "modifiers" as *;
@use "inset" as *;
@use "utility" as *;

$theme: get-theme("page-nav");

// TODO: Check traveler height in case of continuous collapsed/expanded

@mixin continuous-collapsed-traveler($inset-type) {
	#{$inset-type}: $traveler-centering-offset + $traveler-arrow-offset;
	#{if(is-vertical-inset($inset-type), "left", "top")}: $traveler-continuous-inter-offset;
	width: if(is-vertical-inset($inset-type), $nav-link-slider-size, $arrow-cross-size);
	height: if(is-vertical-inset($inset-type), $arrow-cross-size, $nav-link-slider-size);
	border-radius: $nav-link-dot-size;
	transform: translateX(#{if(is-vertical-inset($inset-type), "-50%", "0")}) translateY(#{if(is-vertical-inset($inset-type), "0", "-50%")}) scale(0.75);
}

@mixin continuous-expanded-traveler($inset-type) {
	#{$inset-type}: $traveler-centering-offset;
	#{if(is-vertical-inset($inset-type), "left", "top")}: $traveler-continuous-inter-offset;
	width: if(is-vertical-inset($inset-type), $nav-link-slider-size, $nav-link-dot-size);
	height: if(is-vertical-inset($inset-type), $nav-link-dot-size, $nav-link-slider-size);
	border-radius: $nav-link-dot-size;
	transform: translateX(#{if(is-vertical-inset($inset-type), "-50%", "0")}) translateY(#{if(is-vertical-inset($inset-type), "0", "-50%")}) scale(0.75);
}

@mixin discrete-collapsed-traveler($inset-type) {
	#{$inset-type}: $traveler-centering-offset + $traveler-arrow-offset;
	#{if(is-vertical-inset($inset-type), "left", "top")}: $traveler-discrete-inter-offset;
	width: if(is-vertical-inset($inset-type), $arrow-cross-size, $arrow-main-size);
	height: if(is-vertical-inset($inset-type), $arrow-main-size, $arrow-cross-size);
	border-radius: 0;
	transform: scale(1.25);
	clip-path: map.get($traveler-arrow-shapes, $inset-type);
}

@mixin discrete-expanded-traveler($inset-type) {
	#{$inset-type}: $traveler-centering-offset;
	#{if(is-vertical-inset($inset-type), "left", "top")}: $traveler-discrete-inter-offset;
	transform: scale(1.25);

  @include equal-dim($nav-link-dot-size);
	@include circle-border;
}

@function get-traveler-continuous-offset($seekbar-unit-step-count, $seekbar-unit-step-size, $seekbar-thumb-size) {
	// seekbar-track-size = ((seekbar-unit-count - 1) * seekbar-unit-size) - seekbar-thumb-size
	$seekbar-track-size-unitless: calc((calc(#{$seekbar-unit-step-count} - 1) * #{strip-unit($seekbar-unit-step-size)}) - #{strip-unit($seekbar-thumb-size)});
	// seekbar-resultant-offset = seekbar-unit-size * seekbar-track-size * item-unit-offset
	$seekbar-resultant-offset: calc(#{$seekbar-unit-step-size} * #{$seekbar-track-size-unitless} * var(--traveler-offset, 0));
	$adjusted-decimal-offset: min(#{$seekbar-resultant-offset}, calc((#{$seekbar-unit-step-count} * #{$seekbar-unit-step-size}) - #{$seekbar-thumb-size}));

	@return $adjusted-decimal-offset;
}

$nav-extent-em: 2em;
$nav-link-dot-size: 1em;
$nav-link-slider-size: 2 * $nav-link-dot-size;
$collapsed-em: -(math.div($nav-extent-em + $nav-link-dot-size, 2));
$nav-flap-size: $nav-extent-em;
$nav-link-centering-padding: math.div($nav-extent-em - $nav-link-dot-size, 2);
$nav-link-inter-padding: $nav-link-dot-size;
/* stylelint-disable-next-line unit-allowed-list -- border can be pixel-sized */
$nav-marker-border: 1px solid map.get($theme, "background", "invert", "hex");
$traveler-centering-offset: math.div($nav-extent-em - $nav-link-dot-size, 2);
$traveler-arrow-offset: $nav-link-dot-size;
$traveler-continuous-inter-offset: calc(
	#{$nav-flap-size + math.div($nav-link-slider-size, 2)} +
	#{get-traveler-continuous-offset(
		var(--item-step-count, 1),
		$nav-link-dot-size,
		$nav-link-slider-size
	)}
);
$traveler-discrete-inter-offset: calc(#{$nav-flap-size + $nav-link-inter-padding} + (#{$nav-link-dot-size + (2 * $nav-link-inter-padding)} * var(--traveler-offset, 0)));
$arrow-main-size: math.div($nav-extent-em - $nav-link-dot-size, 2);
$arrow-cross-size: $nav-link-dot-size;
$nav-flap-shapes: (
	top: get-shape(("trapezoid", "short-bottom"), $nav-flap-size),
	right: get-shape(("trapezoid", "short-left"), $nav-flap-size),
	bottom: get-shape(("trapezoid", "short-top"), $nav-flap-size),
	left: get-shape(("trapezoid", "short-right"), $nav-flap-size),
);
$traveler-arrow-shapes: (
	top: get-shape(("arrow", "point-down")),
	right: get-shape(("arrow", "point-left")),
	bottom: get-shape(("arrow", "point-up")),
	left: get-shape(("arrow", "point-right")),
);

@mixin discrete-nav-link($inset-type) {
	@if (is-inset($inset-type)) {
		@if (is-vertical-inset($inset-type)) {
			padding: $nav-link-centering-padding $nav-link-inter-padding;
		} @else {
			padding: $nav-link-inter-padding $nav-link-centering-padding;
		}

		& > .page-nav-marker {
			border: $nav-marker-border;

			@include circle-border;
		}
	} @else {
		@error "#{$inset-type} is not a valid inset";
	}
}

@mixin continuous-nav-link($inset-type) {
	@if (is-inset($inset-type)) {
		@if (is-vertical-inset($inset-type)) {
			padding: $nav-link-centering-padding 0;

			& > .page-nav-marker {
				// TODO: Calculate dynamically based on number of elements/Or use flex
				// TODO: Consider auto-switching to continuous mode when elements are more, in case no mode is explicitly specified in component
				border-top: $nav-marker-border;
				border-bottom: $nav-marker-border;

				@at-root #{selector-replace(&, "li.page-nav-entry", "li.page-nav-entry:first-of-type")} {
					border-left: $nav-marker-border;
					border-top-left-radius: 50%;
					border-bottom-left-radius: 50%;
				}

				@at-root #{selector-replace(&, "li.page-nav-entry", "li.page-nav-entry:last-of-type")} {
					border-right: $nav-marker-border;
					border-top-right-radius: 50%;
					border-bottom-right-radius: 50%;
				}
			}
		} @else {
			padding: 0 $nav-link-centering-padding;

			& > .page-nav-marker {
				// TODO: Calculate dynamically based on number of elements/Or use flex
				// TODO: Consider auto-switching to continuous mode when elements are more, in case no mode is explicitly specified in component
				border-right: $nav-marker-border;
				border-left: $nav-marker-border;

				@at-root #{selector-replace(&, "li.page-nav-entry", "li.page-nav-entry:first-of-type")} {
					border-top: $nav-marker-border;
					border-top-left-radius: 50%;
					border-top-right-radius: 50%;
				}

				@at-root #{selector-replace(&, "li.page-nav-entry", "li.page-nav-entry:last-of-type")} {
					border-bottom: $nav-marker-border;
					border-bottom-right-radius: 50%;
					border-bottom-left-radius: 50%;
				}
			}
		}
	} @else {
		@error "#{$inset-type} is not a valid inset";
	}
}

@mixin hide-nav-flap($inset-type) {
	@if (is-inset($inset-type)) {
		#{$inset-type}: $collapsed-em;
	} @else {
		@error "#{$inset-type} is not a valid inset";
	}
}

@mixin unhide-nav-flap($inset-type) {
	@if (is-inset($inset-type)) {
		#{$inset-type}: 0;
	} @else {
		@error "#{$inset-type} is not a valid inset";
	}
}

// TODO: Use variables for repeated selector paths and attributes

// TODO: Refactor unused styles and simplify

// TODO: Use mixin to minimize and reduce naming confusion

// TODO: Check if other places can use replacement of flex with inline-flex

:host {
	position: absolute;
	transition: all 0.2s ease;

	// TODO: Verify if align-items: center is permissible
	@include flex-row-center;

	@each $inset-type, $shape in $nav-flap-shapes {
		&.#{$inset-type} {
			@if (is-vertical-inset($inset-type)) {
				left: 0;
				width: 100%;
				height: $nav-extent-em;
				filter: drop-shadow(0 0 0.2em map.get($theme, "background", "hex"));

				@include flex-row-center;

				& > ul.page-nav-container {
					padding: 0 $nav-flap-size;

					@include flex-row-evenly;

					& > li.page-nav-entry {
            @include center-text;
						@include flex-column-evenly;
					}
				}
			} @else {
				top: 0;
				width: $nav-extent-em;
				height: 100%;

				@include flex-column-center;

				& > ul.page-nav-container {
					padding: $nav-flap-size 0;

          @include center-text;
					@include flex-column-evenly;

					& > li.page-nav-entry {
						@include flex-row-evenly;
					}
				}
			}

			// TODO: Remove all :not switchers if a default is required in styles
			@include hide-nav-flap($inset-type);

			& > ul.page-nav-container > li.page-nav-entry > a.page-nav-link {
				@at-root #{str-replace("#{&}", ":host", ":host.continuous")} {
					@include continuous-nav-link($inset-type);
				}

				@at-root #{str-replace("#{&}", ":host", ":host.discrete")} {
					@include discrete-nav-link($inset-type);
				}
			}

			&.expanded {
				@include unhide-nav-flap($inset-type);
			}

			& > ul.page-nav-container {
				clip-path: $shape;
			}
		}
	}

  @each $inset-type in ("top" "right" "bottom" "left") {
		&.#{$inset-type}.continuous.collapsed > ul.page-nav-container > .page-nav-traveler {
			@include continuous-collapsed-traveler($inset-type);
		}

		&.#{$inset-type}.continuous.expanded > ul.page-nav-container > .page-nav-traveler {
			@include continuous-expanded-traveler($inset-type);

		}

		&.#{$inset-type}.discrete.collapsed > ul.page-nav-container > .page-nav-traveler {
			@include discrete-collapsed-traveler($inset-type);

		}

		&.#{$inset-type}.discrete.expanded > ul.page-nav-container > .page-nav-traveler {
			@include discrete-expanded-traveler($inset-type);
		}
	}

	& > ul.page-nav-container {
		// TODO: Check if position: relative can be added to iflex
		// TODO: Check if iflex-center can be used elsewhere and in places of iflex
		position: relative;
		background-color: map.get($theme, "background", "invert", "hex");
		color: map.get($theme, "accent", "invert", "hex");

		@include iflex-center;
		@include reset-offsets;

		& > li.page-nav-entry {
			@include iflex-center;

			& > a.page-nav-link {
				text-decoration: none;
				cursor: pointer;

				& > .page-nav-marker {
					@include no-bg;
					@include equal-dim($nav-link-dot-size);
					@include layer(difference);
				}
			}
		}

		& > .page-nav-traveler {
			position: absolute;
			background-color: map.get($theme, "background", "invert", "hex");
			transition: all 0.2s ease;

			@include pointer-disable;
			@include layer(difference);
		}
	}

  &.inverted > ul.page-nav-container {
		@include invert-color;
	}

	& > * {
		@include pointer-enable;
	}
}
