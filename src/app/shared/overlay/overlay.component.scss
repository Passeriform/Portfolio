@use "sass:map";
@use "global" as *;
@use "media" as *;
@use "shapes" as *;
@use "modifiers" as *;
@use "stack" as *;
@use "utility" as *;

@import "./overlay.colors";

@mixin hide-overlay {
	@include hide-with-transition;
	@include pointer-disable;
	@include if-supported("backdrop-filter", none);

	&:before {
		@include hide-with-transition;
		@include pointer-disable;
	}
}

@mixin unhide-overlay {
	@include unhide-with-transition;
	@include pointer-enable;

	@include if-supported("backdrop-filter", blur(0.5em)) {
		&:before {
			@include hide-with-transition;
			@include pointer-enable;
		}
	}

	&:before {
		@include unhide-with-transition;
		@include pointer-enable;
	}
}

:host {
	@include absolute-top-left;
	@include full-perc-size;
	@include pointer-disable;
	@include stack("overlay");

	&.header-offset {
		padding-top: var(--current-header-shift-offset, 0);
	}

	& > .overlay-trigger {
		@include full-perc-size;

		& > .overlay-button {
			background-color: map.get($theme, "background", "invert", "hex");
			transition: all 0.5s ease;
			cursor: pointer;

			@include absolute-right;
			@include pointer-enable;
			@include equal-dim($overlay-flap-size);
			@include layer(difference);
			@include shape(["flap", "top-right"]);

      @at-root #{str-replace("#{&}", ":host", ":host.blink")} {
        @include layer(normal);
      }

			& > .overlay-trigger-img {
				@include center-anchored-image;

				@include shape-content-props("flap", $overlay-flap-size) using ($flap-content-size, $flap-content-offset) {
					top: $flap-content-offset;
					right: $flap-content-offset;
					transition: all 0.5s ease;

					& > img {
						transition: all 0.5s ease;

						@include equal-dim($flap-content-size);
					}
				}
			}
		}
  }

	& > .overlay-trigger > .overlay {
    transition: opacity 0.5s ease, backdrop-filter 0.5s ease;

    @include absolute-top-left;
    @include full-perc-size;
    @include hide-overlay;

    &:before {
      background-color: map.get($theme, "shadow", "hex");
      transition: all 0.3s ease;

      @include content-fix;
      @include absolute-top-left;
      @include full-perc-size;
    }

    &.show {
      @include unhide-overlay;

      &:before {
        opacity: 0.9;
      }

      & ~ .overlay-button {
        $expansion-factor: 1.25;
        $expanded-flap-size: $expansion-factor * $overlay-flap-size;

        @include equal-dim($expanded-flap-size);

        & > .overlay-trigger-img {
          @include shape-content-props("flap", $expanded-flap-size) using ($flap-content-size, $flap-content-offset) {
            $transform-offset: ($expansion-factor - 1) * $flap-content-offset;
            transform: translate(-#{$transform-offset}, $transform-offset);
          }
        }
      }
    }
  }

  &.blink > .overlay-trigger:before {
    background-color: map.get($theme, "background", "invert", "hex");
    animation: blink 1s ease-out infinite;

    @include content-fix;
    @include absolute-right;
    @include shape(["flap", "top-right"]);
    @include equal-dim(1.25 * $overlay-flap-size);
    @include unhide-with-transition;
    @include pointer-disable;
  }
}

@keyframes blink {
	0% {
		// TODO: Try using sizing transform logic instead of animating on clip-path
		clip-path: polygon(20% 0, 100% 0%, 100% 80%);

		@include unhide-with-transition;
	}

	100% {
		@include shape(["flap", "top-right"]);
		@include hide-with-transition;
	}
}
