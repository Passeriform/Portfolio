@use "sass:map";
@use "colors" as *;
@use "global" as *;
@use "media" as *;
@use "modifiers" as *;
@use "shapes" as *;
@use "stack" as *;
@use "utility" as *;

$theme: get-theme("overlay");

:host {
	@include absolute-top-left;
	@include full-perc-size;
	@include pointer-disable;
	@include stack("overlay");

	&.header-offset {
		padding-top: var(--current-header-shift-offset, 0);
	}

  & > .overlay-trigger {
    background-color: map.get($theme, "background", "invert", "hex");
    transition: all 0.2s ease;
    cursor: pointer;

    @include absolute-right;
    @include pointer-enable;
    @include equal-dim($overlay-flap-size);
    @include layer(normal);
    @include shape(["flap", "top-right"]);

    & > .overlay-trigger-img {
      @include center-anchored-image;

      @include shape-content-props("flap", $overlay-flap-size) using ($flap-content-size, $flap-content-offset) {
        top: $flap-content-offset;
        right: $flap-content-offset;
        transition: all 0.2s ease;

        & > img {
          transition: all 0.2s ease;

          @include equal-dim($flap-content-size);
        }
      }
    }
  }

  & > .overlay-cover {
    background-color: map.get($theme, "shadow", "hex");
    transition: all 0.2s ease;
    opacity: 0;

    @include content-fix;
    @include absolute-top-left;
    @include full-perc-size;
    @include pointer-disable;
    @include if-supported("backdrop-filter", blur(1em));
  }

	& > .overlay {
    transition: all 0.2s ease;

    @include absolute-top-left;
    @include full-perc-size;
    @include hide-with-transition;
    @include pointer-disable;
  }

  &.show {
    & > .overlay-cover {
      opacity: 1;
    }

    & > .overlay {
      @include unhide-with-transition;
      @include pointer-enable;

      & ~ .overlay-trigger {
        $expansion-factor: 1.25;
        $expanded-flap-size: $expansion-factor * $overlay-flap-size;

        @include equal-dim($expanded-flap-size);

        & > .overlay-trigger-img {
          @include shape-content-props("flap", $expanded-flap-size) using ($flap-content-size, $flap-content-offset) {
            $transform-offset: ($expansion-factor - 1) * $flap-content-offset;
            transform: translate(-#{$transform-offset}, $transform-offset);
          }
        }
      }
    }
  }

  &.blink::before {
    background-color: map.get($theme, "background", "invert", "hex");
    animation: blink 1s ease-out infinite;

    @include content-fix;
    @include absolute-right;
    @include shape(["flap", "top-right"]);
    @include equal-dim(1.25 * $overlay-flap-size);
    @include unhide-with-transition;
    @include pointer-disable;
  }
}

@keyframes blink {
	0% {
		// TODO: Try using sizing transform logic instead of animating on clip-path
		clip-path: polygon(20% 0, 100% 0%, 100% 80%);

		@include unhide-with-transition;
	}

	100% {
		@include shape(["flap", "top-right"]);
		@include hide-with-transition;
	}
}
