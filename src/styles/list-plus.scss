@use "sass:list";
@use "sass:math";

@function slice($list, $start: 1, $end: length($list)) {
	$result: null;

	@if type-of($start) != number or type-of($end) != number {
		@warn "Either $start or $end are not a number for `slice`.";
	} @else if $start > $end {
		@warn "The start index has to be lesser than or equals to the end index for `slice`.";
	} @else if $start < 1 or $end < 1 {
		@warn "List indexes must be non-zero integers for `slice`.";
	} @else if $start > length($list) {
		@warn "List index is #{$start} but list is only #{length($list)} item long for `slice`.";
	} @else if $end > length($list) {
		@warn "List index is #{$end} but list is only #{length($list)} item long for `slice`.";
	} @else {
		$result: ();

		@for $i from $start through $end {
			$result: list.append($result, list.nth($list, $i));
		}
	}

	@return $result;
}

@function replace($list, $search, $update, $recursive: false) {
	$result: ();

	@for $i from 1 through length($list) {
		@if type-of(list.nth($list, $i)) == list and $recursive {
			$result: list.append(
				$result,
				replace(list.nth($list, $i), $search, $update, $recursive)
			);
		} @else {
			@debug list.nth($list, $i);

      @if list.nth($list, $i) == $search {
				$result: list.append($result, $update);
			} @else {
				$result: list.append($result, list.nth($list, $i));
			}
		}
	}

	@return $result;
}
