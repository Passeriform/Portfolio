@use "sass:list";
@use "sass:math";
@use "sass:string";

/// Remove the unit of a lengths
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
	@if type-of($number) == "number" and not unitless($number) {
		@return math.div($number, $number * 0 + 1);
	}

	@return $number;
}


/// Join list elements to form a single string
/// @param {string} $pieces - the list of strings to implode
/// @param {string} $glue - the "glue" between elements in the result string
/// @return {string} the result string
@function implode($pieces, $glue: "") {
	$result: null;

	@for $i from 1 through length($pieces) {
		$piece: list.nth($pieces, $i);

		@if type-of($piece) == list {
			$result: string.unquote("#{$result}#{$glue}#{implode($piece, $glue)}");
		} @else {
			$result: string.unquote("#{$result}#{$glue}#{$piece}");
		}
	}

	@if $result {
		$result: string.slice($result, string.length($glue) + 1, -1);
	}

	@return $result;
}

@function capitalize($string) {
	@return to-upper-case(string.slice($string, 1, 1)) + string.slice($string, 2);
}

// TODO: Find if this can be automated

@function css-function($prop, $process-params...) {
	@if not(index(["max", "min", "clamp"], $prop)) {
		@error "Specified parameter is not a recognized css function: #{$prop}";
		@return null;
	}

	@return capitalize($prop) + "(" + implode($process-params, ", ") + ")";
}

@function css-min($process-params...) {
	@return css-function("min", $process-params...)
}

@function css-max($process-params...) {
	@return css-function("max", $process-params...)
}

@function css-clamp($process-params...) {
	@return css-function("clamp", $process-params...)
}

@function str-replace($string, $search, $replace) {
	$idx: string.index($string, $search);

	@if $idx {
		@return string.slice($string, 1, $idx - 1) + $replace + str-replace(string.slice($string, $idx + string.length($search)), $search, $replace);
	}

	@return $string;
}
