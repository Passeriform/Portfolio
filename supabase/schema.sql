
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

ALTER SCHEMA "public" OWNER TO "postgres";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE TYPE "public"."entity_type" AS ENUM (
    'LANGUAGE',
    'FRAMEWORK',
    'LICENSE',
    'TOOL',
    'SOCIAL'
);

ALTER TYPE "public"."entity_type" OWNER TO "postgres";

CREATE TYPE "public"."people_type" AS ENUM (
    'PEOPLE',
    'TEAM'
);

ALTER TYPE "public"."people_type" OWNER TO "postgres";

CREATE TYPE "public"."work_asset_type" AS ENUM (
    'VIDEO',
    'AUDIO',
    'GIF',
    'IMAGE',
    'BINARY'
);

ALTER TYPE "public"."work_asset_type" OWNER TO "postgres";

CREATE TYPE "public"."work_reference_type" AS ENUM (
    'RELATED',
    'USES',
    'USED_BY',
    'DEPENDENCY',
    'DEPENDENT'
);

ALTER TYPE "public"."work_reference_type" OWNER TO "postgres";

CREATE TYPE "public"."work_type" AS ENUM (
    'PRODUCT',
    'PROJECT',
    'DESIGN',
    'MISC'
);

ALTER TYPE "public"."work_type" OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."apply_bijective_record_update"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
DECLARE
	new_relation work_reference_type;
BEGIN
	IF (pg_trigger_depth() < 1) THEN
		CASE NEW.relation
			WHEN 'RELATED' THEN
				new_relation = 'RELATED';
			WHEN 'USES' THEN
				new_relation = 'USED_BY';
			WHEN 'USED_BY' THEN
				new_relation = 'USES';
			WHEN 'DEPENDENCY' THEN
				new_relation = 'DEPENDS';
			WHEN 'DEPENDS' THEN
				new_relation = 'DEPENDENCY';
		END CASE;

		IF (tg_op = 'DELETE') THEN
			DELETE FROM tg_table_name where source = old.target;
		ELSE
			INSERT INTO tg_table_name(source, relation, target)
            VALUES (NEW.target, new_relation, NEW.source)
            ON CONFLICT (id) DO UPDATE
            SET (source, relation, target) = (target, new_relation, source);
		END IF;
	END IF;
	RETURN NEW;
END;
$$;

ALTER FUNCTION "public"."apply_bijective_record_update"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."is_social_entity"("entity" bigint) RETURNS boolean
    LANGUAGE "sql" STABLE
    AS $$SELECT (entity IN (
  SELECT id FROM entity_registry WHERE type = 'SOCIAL'::entity_type
));$$;

ALTER FUNCTION "public"."is_social_entity"("entity" bigint) OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."is_team"("people_id" bigint) RETURNS boolean
    LANGUAGE "sql" STABLE
    AS $$SELECT ((
  SELECT type FROM people WHERE id = people_id
) = 'TEAM'::people_type);$$;

ALTER FUNCTION "public"."is_team"("people_id" bigint) OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."recreate_entity_enum"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  EXECUTE (
    SELECT format(
      'CREATE TYPE entity_new AS ENUM (%s)',
      string_agg(DISTINCT quote_literal(entity), ', ')
    )
    FROM (
      select unnest(enum_range(NULL::language))::text as entity
      union
      select unnest(enum_range(NULL::framework))::text as entity
      union
      select unnest(enum_range(NULL::tool))::text as entity
      union
      select unnest(enum_range(NULL::license))::text as entity
      union
      select unnest(enum_range(NULL::social_media_type))::text as entity
    ) as combined
  );

  ALTER TABLE entity_registry
    ALTER COLUMN identifier TYPE entity_new
      USING (entity::text::entity_new);

  DROP TYPE entity;

  ALTER TYPE entity_new RENAME TO entity;
END;
$$;

ALTER FUNCTION "public"."recreate_entity_enum"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."people" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "title" "text" NOT NULL,
    "slug" "text" NOT NULL,
    "route" "text" NOT NULL,
    "avatar" "text" DEFAULT 'https://bird-avatars.jacoblong.dev/api/'::"text" NOT NULL,
    "type" "public"."people_type" NOT NULL,
    "additional_title" "text",
    "brief" "text" NOT NULL,
    "contact_message" "text"
);

ALTER TABLE "public"."people" OWNER TO "postgres";

ALTER TABLE "public"."people" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."about_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."people_contribution_mapping" (
    "id" bigint NOT NULL,
    "contributor" bigint NOT NULL,
    "contributee" bigint NOT NULL,
    CONSTRAINT "people_contribution_mapping_contributee_check" CHECK ("public"."is_team"("contributee"))
);

ALTER TABLE "public"."people_contribution_mapping" OWNER TO "postgres";

ALTER TABLE "public"."people_contribution_mapping" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."contributor_mapping_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."entity_registry" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "identifier" "text" NOT NULL,
    "icon_url" "text",
    "wiki_search_term" "text",
    "type" "public"."entity_type" NOT NULL,
    "fillable_icon_url" "text"
);

ALTER TABLE "public"."entity_registry" OWNER TO "postgres";

ALTER TABLE "public"."entity_registry" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."entity_registry_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."people_social_mapping" (
    "id" bigint NOT NULL,
    "people" bigint NOT NULL,
    "entity" bigint NOT NULL,
    "link" "text" NOT NULL,
    CONSTRAINT "people_social_mapping_entity_check" CHECK ("public"."is_social_entity"("entity"))
);

ALTER TABLE "public"."people_social_mapping" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."people_story" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "people" bigint NOT NULL,
    "image" "text",
    "story_chunk" "text" NOT NULL,
    "from" "date",
    "upto" "date"
    "after" bigint,
);

ALTER TABLE "public"."people_story" OWNER TO "postgres";

ALTER TABLE "public"."people_story" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."people_story_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE "public"."people_social_mapping" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."social_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."work" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "slug" "text" NOT NULL,
    "type" "public"."work_type" NOT NULL,
    "route" "text" NOT NULL,
    "title" "text" NOT NULL,
    "subtitle" "text" NOT NULL,
    "repository" "text",
    "tags" "text"[] DEFAULT '{}'::"text"[] NOT NULL,
    "brief" "text" NOT NULL,
    "logo" "text"
);

ALTER TABLE "public"."work" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."work_assets" (
    "id" bigint NOT NULL,
    "work" bigint NOT NULL,
    "resource" "text" NOT NULL,
    "type" "public"."work_asset_type" DEFAULT 'BINARY'::"public"."work_asset_type" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."work_assets" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."work_entity_mapping" (
    "id" bigint NOT NULL
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "work" bigint NOT NULL,
    "entity" bigint NOT NULL,
);

ALTER TABLE "public"."work_entity_mapping" OWNER TO "postgres";

ALTER TABLE "public"."work_entity_mapping" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."work_entity_mapping_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE "public"."work" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."work_new_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."work_reference_mapping" (
    "source" bigint NOT NULL,
    "relation" "public"."work_reference_type" DEFAULT 'RELATED'::"public"."work_reference_type" NOT NULL,
    "target" bigint NOT NULL,
    CONSTRAINT "work_reference_mapping_source_target_check" CHECK (("source" <> "target"))
);

ALTER TABLE "public"."work_reference_mapping" OWNER TO "postgres";

ALTER TABLE "public"."work_assets" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."work_screenshots_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."entity_registry"
    ADD CONSTRAINT "entity_registry_identifier_key" UNIQUE ("identifier");

ALTER TABLE ONLY "public"."entity_registry"
    ADD CONSTRAINT "entity_registry_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."people_contribution_mapping"
    ADD CONSTRAINT "people_contribution_mapping_contributor_contributee_key" UNIQUE ("contributor", "contributee");

ALTER TABLE ONLY "public"."people_contribution_mapping"
    ADD CONSTRAINT "people_contribution_mapping_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."people"
    ADD CONSTRAINT "people_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."people"
    ADD CONSTRAINT "people_slug_key" UNIQUE ("slug");

ALTER TABLE ONLY "public"."people_social_mapping"
    ADD CONSTRAINT "people_social_mapping_people_entity_key" UNIQUE ("people", "entity");

ALTER TABLE ONLY "public"."people_social_mapping"
    ADD CONSTRAINT "people_social_mapping_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."people_story"
    ADD CONSTRAINT "people_story_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."work_assets"
    ADD CONSTRAINT "work_assets_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."work_assets"
    ADD CONSTRAINT "work_assets_resource_key" UNIQUE ("resource");

ALTER TABLE ONLY "public"."work_entity_mapping"
    ADD CONSTRAINT "work_entity_mapping_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."work"
    ADD CONSTRAINT "work_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."work_reference_mapping"
    ADD CONSTRAINT "work_reference_mapping_pkey" PRIMARY KEY ("source", "relation", "target");

ALTER TABLE ONLY "public"."work"
    ADD CONSTRAINT "work_slug_key" UNIQUE ("slug");

CREATE OR REPLACE TRIGGER "work_reference_flip_trigger" AFTER INSERT OR DELETE OR UPDATE ON "public"."work_reference_mapping" FOR EACH ROW EXECUTE FUNCTION "public"."apply_bijective_record_update"();

ALTER TABLE ONLY "public"."people_contribution_mapping"
    ADD CONSTRAINT "people_contribution_mapping_contributee_fkey" FOREIGN KEY ("contributee") REFERENCES "public"."people"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."people_contribution_mapping"
    ADD CONSTRAINT "people_contribution_mapping_contributor_fkey" FOREIGN KEY ("contributor") REFERENCES "public"."people"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."people_social_mapping"
    ADD CONSTRAINT "people_social_mapping_entity_fkey" FOREIGN KEY ("entity") REFERENCES "public"."entity_registry"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."people_social_mapping"
    ADD CONSTRAINT "people_social_mapping_people_fkey" FOREIGN KEY ("people") REFERENCES "public"."people"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."people_story"
    ADD CONSTRAINT "people_story_after_fkey" FOREIGN KEY ("after") REFERENCES "public"."people_story"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."people_story"
    ADD CONSTRAINT "people_story_people_fkey" FOREIGN KEY ("people") REFERENCES "public"."people"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."work_assets"
    ADD CONSTRAINT "work_assets_work_fkey" FOREIGN KEY ("work") REFERENCES "public"."work"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."work_entity_mapping"
    ADD CONSTRAINT "work_entity_mapping_entity_fkey" FOREIGN KEY ("entity") REFERENCES "public"."entity_registry"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."work_entity_mapping"
    ADD CONSTRAINT "work_entity_mapping_work_fkey" FOREIGN KEY ("work") REFERENCES "public"."work"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."work_reference_mapping"
    ADD CONSTRAINT "work_reference_mapping_source_fkey" FOREIGN KEY ("source") REFERENCES "public"."work"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."work_reference_mapping"
    ADD CONSTRAINT "work_reference_mapping_target_fkey" FOREIGN KEY ("target") REFERENCES "public"."work"("id") ON UPDATE CASCADE ON DELETE CASCADE;

CREATE POLICY "Enable read access for all users" ON "public"."entity_registry" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."people" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."people_contribution_mapping" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."people_social_mapping" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."people_story" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."work" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."work_assets" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."work_entity_mapping" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."work_reference_mapping" FOR SELECT USING (true);

ALTER TABLE "public"."entity_registry" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."people" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."people_contribution_mapping" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."people_social_mapping" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."people_story" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."work" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."work_assets" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."work_entity_mapping" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."work_reference_mapping" ENABLE ROW LEVEL SECURITY;

REVOKE USAGE ON SCHEMA "public" FROM PUBLIC;
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."apply_bijective_record_update"() TO "anon";
GRANT ALL ON FUNCTION "public"."apply_bijective_record_update"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."apply_bijective_record_update"() TO "service_role";

GRANT ALL ON FUNCTION "public"."is_social_entity"("entity" bigint) TO "anon";
GRANT ALL ON FUNCTION "public"."is_social_entity"("entity" bigint) TO "authenticated";
GRANT ALL ON FUNCTION "public"."is_social_entity"("entity" bigint) TO "service_role";

GRANT ALL ON FUNCTION "public"."is_team"("people_id" bigint) TO "anon";
GRANT ALL ON FUNCTION "public"."is_team"("people_id" bigint) TO "authenticated";
GRANT ALL ON FUNCTION "public"."is_team"("people_id" bigint) TO "service_role";

GRANT ALL ON FUNCTION "public"."recreate_entity_enum"() TO "anon";
GRANT ALL ON FUNCTION "public"."recreate_entity_enum"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."recreate_entity_enum"() TO "service_role";

GRANT ALL ON TABLE "public"."people" TO "anon";
GRANT ALL ON TABLE "public"."people" TO "authenticated";
GRANT ALL ON TABLE "public"."people" TO "service_role";

GRANT ALL ON SEQUENCE "public"."about_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."about_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."about_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."people_contribution_mapping" TO "anon";
GRANT ALL ON TABLE "public"."people_contribution_mapping" TO "authenticated";
GRANT ALL ON TABLE "public"."people_contribution_mapping" TO "service_role";

GRANT ALL ON SEQUENCE "public"."contributor_mapping_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."contributor_mapping_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."contributor_mapping_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."entity_registry" TO "anon";
GRANT ALL ON TABLE "public"."entity_registry" TO "authenticated";
GRANT ALL ON TABLE "public"."entity_registry" TO "service_role";

GRANT ALL ON SEQUENCE "public"."entity_registry_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."entity_registry_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."entity_registry_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."people_social_mapping" TO "anon";
GRANT ALL ON TABLE "public"."people_social_mapping" TO "authenticated";
GRANT ALL ON TABLE "public"."people_social_mapping" TO "service_role";

GRANT ALL ON TABLE "public"."people_story" TO "anon";
GRANT ALL ON TABLE "public"."people_story" TO "authenticated";
GRANT ALL ON TABLE "public"."people_story" TO "service_role";

GRANT ALL ON SEQUENCE "public"."people_story_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."people_story_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."people_story_id_seq" TO "service_role";

GRANT ALL ON SEQUENCE "public"."social_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."social_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."social_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."work" TO "anon";
GRANT ALL ON TABLE "public"."work" TO "authenticated";
GRANT ALL ON TABLE "public"."work" TO "service_role";

GRANT ALL ON TABLE "public"."work_assets" TO "anon";
GRANT ALL ON TABLE "public"."work_assets" TO "authenticated";
GRANT ALL ON TABLE "public"."work_assets" TO "service_role";

GRANT ALL ON TABLE "public"."work_entity_mapping" TO "anon";
GRANT ALL ON TABLE "public"."work_entity_mapping" TO "authenticated";
GRANT ALL ON TABLE "public"."work_entity_mapping" TO "service_role";

GRANT ALL ON SEQUENCE "public"."work_entity_mapping_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."work_entity_mapping_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."work_entity_mapping_id_seq" TO "service_role";

GRANT ALL ON SEQUENCE "public"."work_new_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."work_new_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."work_new_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."work_reference_mapping" TO "anon";
GRANT ALL ON TABLE "public"."work_reference_mapping" TO "authenticated";
GRANT ALL ON TABLE "public"."work_reference_mapping" TO "service_role";

GRANT ALL ON SEQUENCE "public"."work_screenshots_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."work_screenshots_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."work_screenshots_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
